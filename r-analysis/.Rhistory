knitr::opts_chunk$set(echo = TRUE, results = 'asis', message = FALSE,
warning = FALSE, comment = FALSE)
library(jsonlite)
library(dplyr)
library(purrr)
library(tidyr)
library(knitr)
library(caret)
library(car)
library(ggplot2)
#Reading three different data sets.
Player_data <- fromJSON("matche_since_2019.json")
#Reading three different data sets.
Player_data <- fromJSON("data/matche_since_2019.json")
# Define the relative paths to the data files
data_dir <- "../data"
# Load the JSON files
Player_data <- fromJSON(file.path(data_dir, "matche_since_2019.json"))
matches_data <- fromJSON(file.path(data_dir, "parsed_matche_since_2019.json"))
Heroes <- fromJSON(file.path(data_dir, "Heroes.json"))
knitr::opts_chunk$set(echo = TRUE, results = 'asis', message = FALSE,
warning = FALSE, comment = FALSE)
library(jsonlite)
library(dplyr)
library(purrr)
library(tidyr)
library(knitr)
library(caret)
library(car)
library(ggplot2)
# Define the relative paths to the data files
data_dir <- "../data"
# Load the JSON files
Player_data <- fromJSON(file.path(data_dir, "matche_since_2019.json"))
matches_data <- fromJSON(file.path(data_dir, "parsed_matche_since_2019.json"))
Heroes <- fromJSON(file.path(data_dir, "Heroes.json"))
#Deleting and renaming Hero name column for more clarity
Heroes <- Heroes %>% select(-starts_with("name"))
Heroes <- Heroes %>%
rename(name = localized_name)
kable(head(Heroes))
#Checking Rows and variables in this data set.
dim(Player_data)
#Checking dimension instead of printing a table which will reflect as few pages when knitted.
dim(matches_data)
# In game chat messages data
Chat_df <- map_df(matches_data$chat, ~ .x)
kable(head(Chat_df))
#Dropping empty columns that are not needed.
matches_data <- matches_data %>% select(-starts_with("cosmetics"))
matches_data <- matches_data %>% select(-starts_with("all_word"))
#unesting a nested data frame within matches_data
players_df <- map_df(matches_data$players, ~ .x)
#Creating New data frame with the required variables and filtering by my personal account Id
new_data_frame <- players_df %>%
filter(account_id == 191944840) %>%
select(match_id, account_id, duration, isRadiant, win, hero_id, kills, deaths,
assists, kda, last_hits, denies, net_worth, total_gold, gold_per_min,total_xp, xp_per_min,
hero_damage)
dim(new_data_frame)
#joining data from two different data frames by hero id
new_data_frame <- left_join(new_data_frame, Heroes, by = c("hero_id" = "id"))
#Removing irrelevant columns
new_data_frame <- new_data_frame %>%
select(-legs, -roles)
#Adding New Column(variable) for lost gold(due to death or buybacks)
new_data_frame <- new_data_frame %>%
mutate(gold_lost = total_gold - net_worth)
#changing duration from second format to minute for readability
new_data_frame <- new_data_frame %>%
mutate(duration = duration / 60)
dim(new_data_frame)
# Create a summary of games played and games won by hero attribute
games_summary <- new_data_frame %>%
group_by(primary_attr) %>%
summarise(Games_Played = n(),
Games_Won = sum(win)) %>%
gather(key = "Outcome", value = "Count", -primary_attr)
# Add a column for losses for convenience
total_games <- nrow(new_data_frame)
new_data_frame <- new_data_frame %>%
mutate(loss = ifelse(win == 1, 0, 1))
# Melt the data for 'win' and 'loss' columns to long format
long_data <- new_data_frame %>%
gather(key = "Outcome", value = "Count", win, loss)
# Calculate the proportions for wins and losses
long_data <- long_data %>%
group_by(primary_attr, Outcome) %>%
summarise(Total = sum(Count)) %>%
ungroup() %>%
mutate(Proportion = Total / total_games)
# Plot the data with facets for each hero attribute
ggplot(long_data, aes(x = Outcome, y = Proportion, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ primary_attr, scales = "free_y") +
scale_y_continuous(labels = scales::percent) +
labs(x = "Outcome", y = "Proportion of Total Matches",
fill = "Match Outcome",
title = "Proportion of Matches Played and Won by Hero Attribute") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize wins and losses
summary_df <- new_data_frame %>%
summarise(TotalWins = sum(win),
TotalLosses = sum(loss)) %>%
gather(key = "Outcome", value = "Count", TotalWins, TotalLosses)
# Plot the histogram
ggplot(summary_df, aes(x = Outcome, y = Count, fill = Outcome)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Outcome", y = "Total Count",
fill = "Match Outcome",
title = "Total Wins vs. Total Losses") +
theme_minimal() +
theme(legend.position = "bottom")
#Calculate the proportions for wins and losses
long_data2 <- new_data_frame %>%
gather(key = "Outcome", value = "Count", win, loss) %>%
group_by(attack_type, Outcome) %>%
summarise(Total = sum(Count)) %>%
ungroup() %>%
mutate(Proportion = Total / sum(Total))  # Calculate proportions
# Create the plot
ggplot(long_data2, aes(x = Outcome, y = Proportion, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ attack_type, scales = "free_y") +
labs(x = "Outcome", y = "Proportion of Total Matches",
fill = "Match Outcome",
title = "Proportion of Matches Played and Won by Attack Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Calculate the proportions for wins and losses
long_data3 <- new_data_frame %>%
gather(key = "Outcome", value = "Count", win, loss) %>%
group_by(primary_attr, attack_type, Outcome) %>%
summarise(Total = sum(Count), .groups = 'drop') %>%
ungroup() %>%
mutate(Proportion = Total / sum(Total))
# Create the plot
ggplot(long_data3, aes(x = attack_type, y = Proportion, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ primary_attr, scales = "free") +
labs(x = "Attack Type", y = "Proportion of Total Matches",
fill = "Match Outcome",
title = "Proportion of Matches Won and Lost by Attack Type within each Primary Attribute") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(new_data_frame, aes(x = factor(win), y = net_worth, fill = factor(win))) +
geom_boxplot() +
labs(x = "Game Outcome", y = "Net Worth",
title = "Distribution of Net Worth by Game Outcome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate the number of games for each hero
hero_play_count <- new_data_frame %>%
count(name) %>%
arrange(desc(n)) %>%
top_n(10, n)  # Select the top 10 most played heroes
# Create the bar chart
ggplot(hero_play_count, aes(x = reorder(name, n), y = n, fill = name)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games Played",
title = "Top 10 Most Played Heroes") +
scale_fill_brewer(palette = "Set1") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
guides(fill = FALSE)  # Hide the legend, as it's redundant in this case
# Calculate total wins and losses for each hero
total_wins_losses <- new_data_frame %>%
filter(name %in% hero_play_count$name) %>%
group_by(name) %>%
summarise(TotalWins = sum(win), TotalLosses = sum(loss)) %>%
ungroup()
# Merge with hero_play_count to get a combined data frame
combined_data <- merge(hero_play_count, total_wins_losses, by = "name")
# Prepare data for plotting
long_data_top_heroes <- combined_data %>%
gather(key = "Outcome", value = "Count", TotalWins, TotalLosses)
# Create the bar chart for total games, wins, and losses
ggplot(long_data_top_heroes, aes(x = name, y = Count, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games (Win/Loss)",
title = "Win/Loss Count for Top 10 Most Played Heroes") +
scale_fill_brewer(palette = "Set1") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "top") +
guides(fill = guide_legend(title = "Type"))
# Aggregate data to sum wins and count total games
aggregated_data <- new_data_frame %>%
group_by(hero_id, name) %>%
summarize(total_wins = sum(win),
total_games = n(),
win_percentage = (total_wins / total_games) * 100) %>%
ungroup()
# Filter out heroes with a low number of games, sort, and select top 10
top_10_heroes <- aggregated_data %>%
filter(total_games > 5) %>%
arrange(desc(win_percentage)) %>%
head(10)
ggplot(top_10_heroes, aes(x = reorder(name, win_percentage), y = win_percentage)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Top 10 Heroes by Win Percentage",
x = "Hero",
y = "Win Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Categorize data as Radiant or Dire
new_data_frame <- new_data_frame %>%
mutate(side = ifelse(isRadiant, "Radiant", "Dire"))
# Calculate wins and losses
side_wins_losses <- new_data_frame %>%
group_by(side) %>%
summarize(wins = sum(win),
losses = sum(1 - win)) %>%
ungroup()
long_side_wins_losses <- side_wins_losses %>%
gather(key = "Outcome", value = "Count", wins, losses)
ggplot(long_side_wins_losses, aes(x = side, y = Count, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Wins and Losses for Radiant and Dire Sides",
x = "Side",
y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("wins" = "green", "losses" = "red")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(new_data_frame, aes(x = duration, fill = factor(win))) +
geom_density(alpha = 0.5) +
labs(title = "Density of Wins and Losses by Duration",
x = "Duration",
y = "Density",
fill = "Outcome") +
theme_minimal()
na_counts <- colSums(is.na(new_data_frame))
na_counts
# Calculate the mean of the non-NA values
mean_hero_damage <- mean(new_data_frame$hero_damage, na.rm = TRUE)
# Replace NA values with the mean
new_data_frame$hero_damage[is.na(new_data_frame$hero_damage)] <- mean_hero_damage
# Select only numeric columns
numeric_data <- new_data_frame %>%
select(where(is.numeric))
# Compute the correlation matrix on the numeric data
correlation_matrix <- cor(numeric_data)
#visualizing collinearity
library(corrplot)
if (requireNamespace("corrplot", quietly = TRUE)) {
corrplot::corrplot(correlation_matrix, method = "color")
}
#Removing variables with perfect collinearity and insignificant correlation:
model_data_frame <- new_data_frame %>%
select(-account_id, -loss, -match_id, -hero_id, -name)
# Ensure that 'win' is a factor
model_data_frame$win <- as.factor(new_data_frame$win)
# Set a seed for reproducibility
set.seed(123)
# Split the data into training and test sets
splitIndex <- createDataPartition(model_data_frame$win, p = 0.8, list = FALSE, times = 1)
train_data <- model_data_frame[splitIndex, ]
test_data <- model_data_frame[-splitIndex, ]
# Create a formula for the full model
full_formula <- as.formula(paste("win ~", paste(names(train_data)[names(train_data) != "win"], collapse = " + ")))
# Fit the full logistic regression model
full_model <- glm(full_formula, data = train_data, family = binomial())
# Perform backward stepwise selection
final_model <- step(full_model, direction = "backward")
# Summary of the model
summary(final_model)
# Predict probabilities on the test set
test_data$predicted_prob <- predict(final_model, newdata = test_data, type = "response")
# Convert probabilities to binary predictions based on a 0.5 threshold
test_data$predicted_class <- ifelse(test_data$predicted_prob > 0.5, 1, 0)
# Calculate the confusion matrix
conf_matrix <- confusionMatrix(as.factor(test_data$predicted_class), as.factor(test_data$win))
# Print the confusion matrix
print(conf_matrix)
# Print accuracy, precision, recall, and F1 score
accuracy <- conf_matrix$overall['Accuracy']
precision <- conf_matrix$byClass['Pos Pred Value']
recall <- conf_matrix$byClass['Sensitivity']
F1_score <- 2 * (precision * recall) / (precision + recall)
print(paste("Accuracy:", accuracy))
print(paste("Precision:", precision))
print(paste("Recall (Sensitivity):", recall))
print(paste("F1 Score:", F1_score))
# Calculate the number of games for each hero
hero_play_count <- new_data_frame %>%
count(name) %>%
arrange(desc(n)) %>%
top_n(10, n)  # Select the top 10 most played heroes
# Create the bar chart
ggplot(hero_play_count, aes(x = reorder(name, n), y = n, fill = name)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games Played",
title = "Top 10 Most Played Heroes") +
scale_fill_brewer(palette = "Set1") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
guides(fill = FALSE)  # Hide the legend, as it's redundant in this case
print(hero_play_count)
# Define custom colors for the heroes
custom_colors <- c("Bloodseeker" = "blue", "Dawnbreaker" = "green", "Phantom Assassin" = "red",
"Silencer" = "purple", "Jakiro" = "orange", "Lifestealer" = "brown",
"Sniper" = "cyan", "Axe" = "pink", "Spirit Breaker" = "yellow",
"Gyrocopter" = "violet", "Slark" = "magenta", "Legion Commander" = "gold")
# Calculate the number of games for each hero
hero_play_count <- new_data_frame %>%
count(name) %>%
arrange(desc(n)) %>%
top_n(10, n)  # Select the top 10 most played heroes
# Create the bar chart
ggplot(hero_play_count, aes(x = reorder(name, n), y = n, fill = name)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games Played",
title = "Top 10 Most Played Heroes") +
scale_fill_brewer(values = custom_colors) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
guides(fill = FALSE)  # Hide the legend, as it's redundant in this case
# Calculate the number of games for each hero
hero_play_count <- new_data_frame %>%
count(name) %>%
arrange(desc(n)) %>%
top_n(10, n)  # Select the top 10 most played heroes
# Create the bar chart
ggplot(hero_play_count, aes(x = reorder(name, n), y = n, fill = name)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games Played",
title = "Top 10 Most Played Heroes") +
scale_fill_brewer(palette = "Set1") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
guides(fill = FALSE)  # Hide the legend, as it's redundant in this case
# Calculate the number of games for each hero
hero_play_count <- new_data_frame %>%
count(name) %>%
arrange(desc(n)) %>%
top_n(10, n)  # Select the top 10 most played heroes
# Create the bar chart
ggplot(hero_play_count, aes(x = reorder(name, n), y = n, fill = name)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
labs(x = "Hero", y = "Number of Games Played",
title = "Top 10 Most Played Heroes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
guides(fill = FALSE)  # Hide the legend, as it's redundant in this case
# Calculate the number of games for each hero
hero_play_count <- new_data_frame %>%
count(name) %>%
arrange(desc(n)) %>%
top_n(10, n)  # Select the top 10 most played heroes
# Create the bar chart
ggplot(hero_play_count, aes(x = reorder(name, n), y = n, fill = name)) +
geom_bar(stat = "identity", position = "dodge", fill = "skyblue") +
labs(x = "Hero", y = "Number of Games Played",
title = "Top 10 Most Played Heroes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
guides(fill = FALSE)  # Hide the legend, as it's redundant in this case
# Categorize data as Radiant or Dire
new_data_frame <- new_data_frame %>%
mutate(side = ifelse(isRadiant, "Radiant", "Dire"))
# Calculate wins and losses
side_wins_losses <- new_data_frame %>%
group_by(side) %>%
summarize(wins = sum(win),
losses = sum(1 - win)) %>%
ungroup()
long_side_wins_losses <- side_wins_losses %>%
gather(key = "Outcome", value = "Count", wins, losses)
ggplot(long_side_wins_losses, aes(x = side, y = Count, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Wins and Losses for Radiant and Dire Sides",
x = "Side",
y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("wins" = "skyblue", "losses" = "pink")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Calculate total wins and losses for each hero
total_wins_losses <- new_data_frame %>%
filter(name %in% hero_play_count$name) %>%
group_by(name) %>%
summarise(TotalWins = sum(win), TotalLosses = sum(loss)) %>%
ungroup()
# Merge with hero_play_count to get a combined data frame
combined_data <- merge(hero_play_count, total_wins_losses, by = "name")
# Prepare data for plotting
long_data_top_heroes <- combined_data %>%
gather(key = "Outcome", value = "Count", TotalWins, TotalLosses)
# Create the bar chart for total games, wins, and losses
ggplot(long_data_top_heroes, aes(x = name, y = Count, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games (Win/Loss)",
title = "Win/Loss Count for Top 10 Most Played Heroes") +
scale_fill_brewer(values = c("TotalWins" = "skyblue", "TotalLosses" = "pink")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "top") +
guides(fill = guide_legend(title = "Type"))
# Calculate total wins and losses for each hero
total_wins_losses <- new_data_frame %>%
filter(name %in% hero_play_count$name) %>%
group_by(name) %>%
summarise(TotalWins = sum(win), TotalLosses = sum(loss)) %>%
ungroup()
# Merge with hero_play_count to get a combined data frame
combined_data <- merge(hero_play_count, total_wins_losses, by = "name")
# Prepare data for plotting
long_data_top_heroes <- combined_data %>%
gather(key = "Outcome", value = "Count", TotalWins, TotalLosses)
# Create the bar chart for total games, wins, and losses
ggplot(long_data_top_heroes, aes(x = name, y = Count, fill = Outcome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Hero", y = "Number of Games (Win/Loss)",
title = "Win/Loss Count for Top 10 Most Played Heroes") +
scale_fill_manual(values = c("TotalWins" = "skyblue", "TotalLosses" = "pink")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "top") +
guides(fill = guide_legend(title = "Type"))
# List of required libraries
required_packages <- c("jsonlite", "dplyr", "purrr", "tidyr", "knitr", "caret", "car", "ggplot2")
# Function to install packages if not already installed
install_if_missing <- function(p) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
}
# Install and load the packages
for (pkg in required_packages) {
install_if_missing(pkg)
library(pkg, character.only = TRUE)
}
# Get package versions
package_versions <- sapply(required_packages, function(p) {
packageVersion(p)
})
# Create requirements.txt file
requirements_file <- "requirements.txt"
file_conn <- file(requirements_file)
# Write package names and versions to the file
for (pkg in required_packages) {
cat(sprintf("%s==%s\n", pkg, package_versions[pkg]), file = file_conn)
}
# Close the file connection
close(file_conn)
# Print confirmation message
cat("requirements.txt has been created with the package versions.")
# List of required libraries
required_packages <- c("jsonlite", "dplyr", "purrr", "tidyr", "knitr", "caret", "car", "ggplot2")
# Function to install packages if not already installed
install_if_missing <- function(p) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
}
# Install and load the packages
for (pkg in required_packages) {
install_if_missing(pkg)
library(pkg, character.only = TRUE)
}
# Get package versions
package_versions <- sapply(required_packages, function(p) {
packageVersion(p)
})
# Create requirements.txt file
requirements_file <- "requirements.txt"
file_conn <- file(requirements_file)
# Write package names and versions to the file
for (pkg in required_packages) {
cat(sprintf("%s==%s\n", pkg, package_versions[pkg]), file = file_conn)
}
# Close the file connection
close(file_conn)
# Print confirmation message
cat("requirements.txt has been created with the package versions.")
# List of required libraries
required_packages <- c("jsonlite", "dplyr", "purrr", "tidyr", "knitr", "caret", "car", "ggplot2")
# Function to install packages if not already installed
install_if_missing <- function(p) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
}
# Install and load the packages
for (pkg in required_packages) {
install_if_missing(pkg)
library(pkg, character.only = TRUE)
}
# Get package versions
package_versions <- sapply(required_packages, function(p) {
as.character(packageVersion(p))
})
# Create requirements.txt file
requirements_file <- "requirements.txt"
file_conn <- file(requirements_file, "w")
# Write package names and versions to the file
for (pkg in required_packages) {
cat(sprintf("%s==%s\n", pkg, package_versions[pkg]), file = file_conn)
}
# Close the file connection
close(file_conn)
# Print confirmation message
cat("requirements.txt has been created with the package versions.\n")
